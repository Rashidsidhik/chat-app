"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpinUp = void 0;
const axios_1 = __importDefault(require("axios"));
const debug_1 = __importDefault(require("debug"));
const log = (0, debug_1.default)("server-ping-keeper");
class SpinUp {
    /**
     * Creates a new ServerPingKeeper instance
     * @param options Configuration options for the ping keeper
     * @throws {Error} If interval is less than 10 minutes
     */
    constructor(options) {
        // Changed the timer type to NodeJS.Timeout
        this.timer = null;
        if (options.intervalMinutes < 5) {
            throw new Error("Interval must be at least 5 minutes to prevent server abuse");
        }
        this.options = options;
        log("ServerPingKeeper initialized with interval of %d minutes", options.intervalMinutes);
    }
    /**
     * Starts the periodic ping service
     * @returns void
     */
    start() {
        if (this.timer) {
            log("Ping service is already running");
            return;
        }
        const intervalMs = this.options.intervalMinutes * 60 * 1000;
        this.timer = setInterval(async () => {
            var _a, _b, _c, _d;
            try {
                const response = await axios_1.default.get(this.options.url);
                log("Ping successful");
                (_b = (_a = this.options).onSuccess) === null || _b === void 0 ? void 0 : _b.call(_a, response.data);
            }
            catch (error) {
                log("Ping failed:", error);
                if (error instanceof Error) {
                    (_d = (_c = this.options).onError) === null || _d === void 0 ? void 0 : _d.call(_c, error);
                }
            }
        }, intervalMs);
        log("Ping service started");
    }
    /**
     * Stops the periodic ping service
     * @returns void
     */
    stop() {
        if (this.timer) {
            clearInterval(this.timer);
            this.timer = null;
            log("Ping service stopped");
        }
    }
}
exports.SpinUp = SpinUp;
